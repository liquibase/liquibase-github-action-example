name: Liquibase CI

on:
  pull_request:
    branches:
      - main

jobs:
  ci:
    runs-on: ubuntu-latest
    name: CI Checks
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Update SQL
        id: updateSQL
        uses: liquibase/liquibase-github-action@v2
        with:
          operation: "updateSQL"
          classpath: "example/changelogs"
          changeLogFile: "samplechangelog.h2.sql"
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          url: ${{ secrets.URL }}
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Update SQL')
            })
            // 2. Prepare format of the comment
            const output = `#### Liquibase UpdateSQL ðŸ¤–\`${{ steps.updateSQL.outcome }}\`
            <details><summary>SQL Command Output</summary>

            \`\`\`\n
            ${{ steps.updateSQL.outputs.stdout }}
            \`\`\`

            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }